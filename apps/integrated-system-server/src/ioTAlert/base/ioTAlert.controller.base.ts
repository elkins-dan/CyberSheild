/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IoTAlertService } from "../ioTAlert.service";
import { IoTAlertCreateInput } from "./IoTAlertCreateInput";
import { IoTAlert } from "./IoTAlert";
import { IoTAlertFindManyArgs } from "./IoTAlertFindManyArgs";
import { IoTAlertWhereUniqueInput } from "./IoTAlertWhereUniqueInput";
import { IoTAlertUpdateInput } from "./IoTAlertUpdateInput";

export class IoTAlertControllerBase {
  constructor(protected readonly service: IoTAlertService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: IoTAlert })
  async createIoTAlert(
    @common.Body() data: IoTAlertCreateInput
  ): Promise<IoTAlert> {
    return await this.service.createIoTAlert({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [IoTAlert] })
  @ApiNestedQuery(IoTAlertFindManyArgs)
  async ioTAlerts(@common.Req() request: Request): Promise<IoTAlert[]> {
    const args = plainToClass(IoTAlertFindManyArgs, request.query);
    return this.service.ioTAlerts({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: IoTAlert })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ioTAlert(
    @common.Param() params: IoTAlertWhereUniqueInput
  ): Promise<IoTAlert | null> {
    const result = await this.service.ioTAlert({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: IoTAlert })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIoTAlert(
    @common.Param() params: IoTAlertWhereUniqueInput,
    @common.Body() data: IoTAlertUpdateInput
  ): Promise<IoTAlert | null> {
    try {
      return await this.service.updateIoTAlert({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: IoTAlert })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIoTAlert(
    @common.Param() params: IoTAlertWhereUniqueInput
  ): Promise<IoTAlert | null> {
    try {
      return await this.service.deleteIoTAlert({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
