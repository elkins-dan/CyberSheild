/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { IoTAlert } from "./IoTAlert";
import { IoTAlertCountArgs } from "./IoTAlertCountArgs";
import { IoTAlertFindManyArgs } from "./IoTAlertFindManyArgs";
import { IoTAlertFindUniqueArgs } from "./IoTAlertFindUniqueArgs";
import { DeleteIoTAlertArgs } from "./DeleteIoTAlertArgs";
import { IoTAlertService } from "../ioTAlert.service";
@graphql.Resolver(() => IoTAlert)
export class IoTAlertResolverBase {
  constructor(protected readonly service: IoTAlertService) {}

  async _ioTAlertsMeta(
    @graphql.Args() args: IoTAlertCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [IoTAlert])
  async ioTAlerts(
    @graphql.Args() args: IoTAlertFindManyArgs
  ): Promise<IoTAlert[]> {
    return this.service.ioTAlerts(args);
  }

  @graphql.Query(() => IoTAlert, { nullable: true })
  async ioTAlert(
    @graphql.Args() args: IoTAlertFindUniqueArgs
  ): Promise<IoTAlert | null> {
    const result = await this.service.ioTAlert(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => IoTAlert)
  async deleteIoTAlert(
    @graphql.Args() args: DeleteIoTAlertArgs
  ): Promise<IoTAlert | null> {
    try {
      return await this.service.deleteIoTAlert(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
