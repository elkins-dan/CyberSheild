/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TrainingDataService } from "../trainingData.service";
import { TrainingDataCreateInput } from "./TrainingDataCreateInput";
import { TrainingData } from "./TrainingData";
import { TrainingDataFindManyArgs } from "./TrainingDataFindManyArgs";
import { TrainingDataWhereUniqueInput } from "./TrainingDataWhereUniqueInput";
import { TrainingDataUpdateInput } from "./TrainingDataUpdateInput";

export class TrainingDataControllerBase {
  constructor(protected readonly service: TrainingDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TrainingData })
  async createTrainingData(
    @common.Body() data: TrainingDataCreateInput
  ): Promise<TrainingData> {
    return await this.service.createTrainingData({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TrainingData] })
  @ApiNestedQuery(TrainingDataFindManyArgs)
  async trainingDataItems(
    @common.Req() request: Request
  ): Promise<TrainingData[]> {
    const args = plainToClass(TrainingDataFindManyArgs, request.query);
    return this.service.trainingDataItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TrainingData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async trainingData(
    @common.Param() params: TrainingDataWhereUniqueInput
  ): Promise<TrainingData | null> {
    const result = await this.service.trainingData({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TrainingData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTrainingData(
    @common.Param() params: TrainingDataWhereUniqueInput,
    @common.Body() data: TrainingDataUpdateInput
  ): Promise<TrainingData | null> {
    try {
      return await this.service.updateTrainingData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TrainingData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTrainingData(
    @common.Param() params: TrainingDataWhereUniqueInput
  ): Promise<TrainingData | null> {
    try {
      return await this.service.deleteTrainingData({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
