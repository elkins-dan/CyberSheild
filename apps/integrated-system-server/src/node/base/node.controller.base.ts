/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NodeService } from "../node.service";
import { NodeCreateInput } from "./NodeCreateInput";
import { Node } from "./Node";
import { NodeFindManyArgs } from "./NodeFindManyArgs";
import { NodeWhereUniqueInput } from "./NodeWhereUniqueInput";
import { NodeUpdateInput } from "./NodeUpdateInput";

export class NodeControllerBase {
  constructor(protected readonly service: NodeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Node })
  async createNode(@common.Body() data: NodeCreateInput): Promise<Node> {
    return await this.service.createNode({
      data: data,
      select: {
        createdAt: true,
        id: true,
        ipAddress: true,
        nodeId: true,
        port: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Node] })
  @ApiNestedQuery(NodeFindManyArgs)
  async nodes(@common.Req() request: Request): Promise<Node[]> {
    const args = plainToClass(NodeFindManyArgs, request.query);
    return this.service.nodes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        ipAddress: true,
        nodeId: true,
        port: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Node })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async node(
    @common.Param() params: NodeWhereUniqueInput
  ): Promise<Node | null> {
    const result = await this.service.node({
      where: params,
      select: {
        createdAt: true,
        id: true,
        ipAddress: true,
        nodeId: true,
        port: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Node })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNode(
    @common.Param() params: NodeWhereUniqueInput,
    @common.Body() data: NodeUpdateInput
  ): Promise<Node | null> {
    try {
      return await this.service.updateNode({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          ipAddress: true,
          nodeId: true,
          port: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Node })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNode(
    @common.Param() params: NodeWhereUniqueInput
  ): Promise<Node | null> {
    try {
      return await this.service.deleteNode({
        where: params,
        select: {
          createdAt: true,
          id: true,
          ipAddress: true,
          nodeId: true,
          port: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
