/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VulnerabilityService } from "../vulnerability.service";
import { VulnerabilityCreateInput } from "./VulnerabilityCreateInput";
import { Vulnerability } from "./Vulnerability";
import { VulnerabilityFindManyArgs } from "./VulnerabilityFindManyArgs";
import { VulnerabilityWhereUniqueInput } from "./VulnerabilityWhereUniqueInput";
import { VulnerabilityUpdateInput } from "./VulnerabilityUpdateInput";

export class VulnerabilityControllerBase {
  constructor(protected readonly service: VulnerabilityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Vulnerability })
  async createVulnerability(
    @common.Body() data: VulnerabilityCreateInput
  ): Promise<Vulnerability> {
    return await this.service.createVulnerability({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Vulnerability] })
  @ApiNestedQuery(VulnerabilityFindManyArgs)
  async vulnerabilities(
    @common.Req() request: Request
  ): Promise<Vulnerability[]> {
    const args = plainToClass(VulnerabilityFindManyArgs, request.query);
    return this.service.vulnerabilities({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Vulnerability })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async vulnerability(
    @common.Param() params: VulnerabilityWhereUniqueInput
  ): Promise<Vulnerability | null> {
    const result = await this.service.vulnerability({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Vulnerability })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVulnerability(
    @common.Param() params: VulnerabilityWhereUniqueInput,
    @common.Body() data: VulnerabilityUpdateInput
  ): Promise<Vulnerability | null> {
    try {
      return await this.service.updateVulnerability({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Vulnerability })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVulnerability(
    @common.Param() params: VulnerabilityWhereUniqueInput
  ): Promise<Vulnerability | null> {
    try {
      return await this.service.deleteVulnerability({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
