/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Vulnerability } from "./Vulnerability";
import { VulnerabilityCountArgs } from "./VulnerabilityCountArgs";
import { VulnerabilityFindManyArgs } from "./VulnerabilityFindManyArgs";
import { VulnerabilityFindUniqueArgs } from "./VulnerabilityFindUniqueArgs";
import { DeleteVulnerabilityArgs } from "./DeleteVulnerabilityArgs";
import { VulnerabilityService } from "../vulnerability.service";
@graphql.Resolver(() => Vulnerability)
export class VulnerabilityResolverBase {
  constructor(protected readonly service: VulnerabilityService) {}

  async _vulnerabilitiesMeta(
    @graphql.Args() args: VulnerabilityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Vulnerability])
  async vulnerabilities(
    @graphql.Args() args: VulnerabilityFindManyArgs
  ): Promise<Vulnerability[]> {
    return this.service.vulnerabilities(args);
  }

  @graphql.Query(() => Vulnerability, { nullable: true })
  async vulnerability(
    @graphql.Args() args: VulnerabilityFindUniqueArgs
  ): Promise<Vulnerability | null> {
    const result = await this.service.vulnerability(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Vulnerability)
  async deleteVulnerability(
    @graphql.Args() args: DeleteVulnerabilityArgs
  ): Promise<Vulnerability | null> {
    try {
      return await this.service.deleteVulnerability(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
