/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MachineLearningModel as PrismaMachineLearningModel,
} from "@prisma/client";

export class MachineLearningModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MachineLearningModelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.machineLearningModel.count(args);
  }

  async machineLearningModels(
    args: Prisma.MachineLearningModelFindManyArgs
  ): Promise<PrismaMachineLearningModel[]> {
    return this.prisma.machineLearningModel.findMany(args);
  }
  async machineLearningModel(
    args: Prisma.MachineLearningModelFindUniqueArgs
  ): Promise<PrismaMachineLearningModel | null> {
    return this.prisma.machineLearningModel.findUnique(args);
  }
  async createMachineLearningModel(
    args: Prisma.MachineLearningModelCreateArgs
  ): Promise<PrismaMachineLearningModel> {
    return this.prisma.machineLearningModel.create(args);
  }
  async updateMachineLearningModel(
    args: Prisma.MachineLearningModelUpdateArgs
  ): Promise<PrismaMachineLearningModel> {
    return this.prisma.machineLearningModel.update(args);
  }
  async deleteMachineLearningModel(
    args: Prisma.MachineLearningModelDeleteArgs
  ): Promise<PrismaMachineLearningModel> {
    return this.prisma.machineLearningModel.delete(args);
  }
}
