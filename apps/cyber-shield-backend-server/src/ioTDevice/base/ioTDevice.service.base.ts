/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, IoTDevice as PrismaIoTDevice } from "@prisma/client";

export class IoTDeviceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.IoTDeviceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ioTDevice.count(args);
  }

  async ioTDevices(
    args: Prisma.IoTDeviceFindManyArgs
  ): Promise<PrismaIoTDevice[]> {
    return this.prisma.ioTDevice.findMany(args);
  }
  async ioTDevice(
    args: Prisma.IoTDeviceFindUniqueArgs
  ): Promise<PrismaIoTDevice | null> {
    return this.prisma.ioTDevice.findUnique(args);
  }
  async createIoTDevice(
    args: Prisma.IoTDeviceCreateArgs
  ): Promise<PrismaIoTDevice> {
    return this.prisma.ioTDevice.create(args);
  }
  async updateIoTDevice(
    args: Prisma.IoTDeviceUpdateArgs
  ): Promise<PrismaIoTDevice> {
    return this.prisma.ioTDevice.update(args);
  }
  async deleteIoTDevice(
    args: Prisma.IoTDeviceDeleteArgs
  ): Promise<PrismaIoTDevice> {
    return this.prisma.ioTDevice.delete(args);
  }
}
