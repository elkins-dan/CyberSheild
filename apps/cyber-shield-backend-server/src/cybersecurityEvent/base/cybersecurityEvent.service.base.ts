/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CybersecurityEvent as PrismaCybersecurityEvent,
} from "@prisma/client";

export class CybersecurityEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CybersecurityEventCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cybersecurityEvent.count(args);
  }

  async cybersecurityEvents(
    args: Prisma.CybersecurityEventFindManyArgs
  ): Promise<PrismaCybersecurityEvent[]> {
    return this.prisma.cybersecurityEvent.findMany(args);
  }
  async cybersecurityEvent(
    args: Prisma.CybersecurityEventFindUniqueArgs
  ): Promise<PrismaCybersecurityEvent | null> {
    return this.prisma.cybersecurityEvent.findUnique(args);
  }
  async createCybersecurityEvent(
    args: Prisma.CybersecurityEventCreateArgs
  ): Promise<PrismaCybersecurityEvent> {
    return this.prisma.cybersecurityEvent.create(args);
  }
  async updateCybersecurityEvent(
    args: Prisma.CybersecurityEventUpdateArgs
  ): Promise<PrismaCybersecurityEvent> {
    return this.prisma.cybersecurityEvent.update(args);
  }
  async deleteCybersecurityEvent(
    args: Prisma.CybersecurityEventDeleteArgs
  ): Promise<PrismaCybersecurityEvent> {
    return this.prisma.cybersecurityEvent.delete(args);
  }
}
